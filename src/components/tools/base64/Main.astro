---
import Error from '~/components/atoms/Error.astro';
---

<script>
	const errorAlert = document.querySelector('#error');
	const resultContainer = document.querySelector('#result');
	const submitEncodeButton = document.querySelector('#submit-encode');
	const submitDecodeButton = document.querySelector('#submit-decode');
	var Base64 = {
		_keyStr: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=',
		encode: function (e) {
			var t = '';
			var n, r, i, s, o, u, a;
			var f = 0;
			e = Base64._utf8_encode(e);
			while (f < e.length) {
				n = e.charCodeAt(f++);
				r = e.charCodeAt(f++);
				i = e.charCodeAt(f++);
				s = n >> 2;
				o = ((n & 3) << 4) | (r >> 4);
				u = ((r & 15) << 2) | (i >> 6);
				a = i & 63;
				if (isNaN(r)) {
					u = a = 64;
				} else if (isNaN(i)) {
					a = 64;
				}
				t = t + this._keyStr.charAt(s) + this._keyStr.charAt(o) + this._keyStr.charAt(u) + this._keyStr.charAt(a);
			}
			return t;
		},
		decode: function (e) {
			var t = '';
			var n, r, i;
			var s, o, u, a;
			var f = 0;
			e = e.replace(/[^A-Za-z0-9+/=]/g, '');
			while (f < e.length) {
				s = this._keyStr.indexOf(e.charAt(f++));
				o = this._keyStr.indexOf(e.charAt(f++));
				u = this._keyStr.indexOf(e.charAt(f++));
				a = this._keyStr.indexOf(e.charAt(f++));
				n = (s << 2) | (o >> 4);
				r = ((o & 15) << 4) | (u >> 2);
				i = ((u & 3) << 6) | a;
				t = t + String.fromCharCode(n);
				if (u != 64) {
					t = t + String.fromCharCode(r);
				}
				if (a != 64) {
					t = t + String.fromCharCode(i);
				}
			}
			t = Base64._utf8_decode(t);
			return t;
		},
		_utf8_encode: function (e) {
			e = e.replace(/rn/g, 'n');
			var t = '';
			for (var n = 0; n < e.length; n++) {
				var r = e.charCodeAt(n);
				if (r < 128) {
					t += String.fromCharCode(r);
				} else if (r > 127 && r < 2048) {
					t += String.fromCharCode((r >> 6) | 192);
					t += String.fromCharCode((r & 63) | 128);
				} else {
					t += String.fromCharCode((r >> 12) | 224);
					t += String.fromCharCode(((r >> 6) & 63) | 128);
					t += String.fromCharCode((r & 63) | 128);
				}
			}
			return t;
		},
		_utf8_decode: function (e) {
			var c1, c2, c3;
			var t = '';
			var n = 0;
			var r = (c1 = c2 = 0);
			while (n < e.length) {
				r = e.charCodeAt(n);
				if (r < 128) {
					t += String.fromCharCode(r);
					n++;
				} else if (r > 191 && r < 224) {
					c2 = e.charCodeAt(n + 1);
					t += String.fromCharCode(((r & 31) << 6) | (c2 & 63));
					n += 2;
				} else {
					c2 = e.charCodeAt(n + 1);
					c3 = e.charCodeAt(n + 2);
					t += String.fromCharCode(((r & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));
					n += 3;
				}
			}
			return t;
		},
	};

	function resetPage() {
		errorAlert.style.display = 'none';
		resultContainer.innerHTML = '';
	}

	function strToBase64(event) {
		event.preventDefault();
		resetPage();

		var input = document.getElementById('input').value.trim();
		const base64Data = Base64.encode(input);

		resultContainer.appendChild(document.createTextNode(base64Data));
	}

	function base64ToStr(event) {
		event.preventDefault();
		resetPage();

		var input = document.getElementById('input').value.trim();
		const decodedData = Base64.decode(input);

		resultContainer.appendChild(document.createTextNode(decodedData));
	}

	submitEncodeButton.addEventListener('click', strToBase64);
	submitDecodeButton.addEventListener('click', base64ToStr);
	resetPage();
</script>

<section>
	<div class="max-w-6xl mx-auto px-4 sm:px-6">
		<div class="py-12 md:py-20">
			<div class="text-center pb-10 md:pb-16 max-w-5xl mx-auto">
				<h1 class="text-5xl md:text-[3.50rem] font-bold leading-tighter tracking-tighter mb-4 font-heading">Base64</h1>
				<div class="max-w-3xl mx-auto">
					<p class="text-xl text-gray-600 mb-8 dark:text-slate-400">
						This tool allows you to encode and decode between base64 and plain-text.
					</p>
					<div class="max-w-3xl m-auto flex flex-nowrap flex-col sm:flex-row sm:justify-center gap-4">
						<div class="flex w-full sm:w-full">
							<form class="w-full sm:w-full">
								<div
									class="w-full mb-4 border border-gray-200 rounded-lg bg-gray-50 dark:bg-gray-700 dark:border-gray-600"
								>
									<div class="px-4 py-2 bg-white rounded-t-lg dark:bg-gray-800">
										<label for="input" class="sr-only">Your comment</label>
										<textarea
											id="input"
											rows="10"
											class="w-full px-0 text-sm text-gray-900 bg-white border-0 dark:bg-gray-800 focus:ring-0 dark:text-white dark:placeholder-gray-400"
											placeholder="Paste your data here.."
											required></textarea>
									</div>
									<div class="flex items-center justify-between px-3 py-2 border-t dark:border-gray-600">
										<button
											type="submit"
											id="submit-encode"
											class="inline-flex items-center py-2.5 px-4 text-xs font-medium text-center text-white bg-blue-700 rounded-lg focus:ring-4 focus:ring-blue-200 dark:focus:ring-blue-900 hover:bg-blue-800"
										>
											Encode
										</button><button
											type="submit"
											id="submit-decode"
											class="inline-flex items-center py-2.5 px-4 text-xs font-medium text-center text-white bg-blue-700 rounded-lg focus:ring-4 focus:ring-blue-200 dark:focus:ring-blue-900 hover:bg-blue-800"
										>
											Decode
										</button>
										<!-- <div class="flex pl-0 space-x-1 sm:pl-2">
											<button
												type="button"
												class="inline-flex justify-center p-2 text-gray-500 rounded cursor-pointer hover:text-gray-900 hover:bg-gray-100 dark:text-gray-400 dark:hover:text-white dark:hover:bg-gray-600"
											>
												<svg
													aria-hidden="true"
													class="w-5 h-5"
													fill="currentColor"
													viewBox="0 0 20 20"
													xmlns="http://www.w3.org/2000/svg"
													><path
														fill-rule="evenodd"
														d="M8 4a3 3 0 00-3 3v4a5 5 0 0010 0V7a1 1 0 112 0v4a7 7 0 11-14 0V7a5 5 0 0110 0v4a3 3 0 11-6 0V7a1 1 0 012 0v4a1 1 0 102 0V7a3 3 0 00-3-3z"
														clip-rule="evenodd"></path>
												</svg>
												<span class="sr-only">Attach file</span>
											</button>
											<button
												type="button"
												class="inline-flex justify-center p-2 text-gray-500 rounded cursor-pointer hover:text-gray-900 hover:bg-gray-100 dark:text-gray-400 dark:hover:text-white dark:hover:bg-gray-600"
											>
												<svg
													aria-hidden="true"
													class="w-5 h-5"
													fill="currentColor"
													viewBox="0 0 20 20"
													xmlns="http://www.w3.org/2000/svg"
													><path
														fill-rule="evenodd"
														d="M5.05 4.05a7 7 0 119.9 9.9L10 18.9l-4.95-4.95a7 7 0 010-9.9zM10 11a2 2 0 100-4 2 2 0 000 4z"
														clip-rule="evenodd"></path>
												</svg>
												<span class="sr-only">Set location</span>
											</button>
											<button
												type="button"
												class="inline-flex justify-center p-2 text-gray-500 rounded cursor-pointer hover:text-gray-900 hover:bg-gray-100 dark:text-gray-400 dark:hover:text-white dark:hover:bg-gray-600"
											>
												<svg
													aria-hidden="true"
													class="w-5 h-5"
													fill="currentColor"
													viewBox="0 0 20 20"
													xmlns="http://www.w3.org/2000/svg"
													><path
														fill-rule="evenodd"
														d="M4 3a2 2 0 00-2 2v10a2 2 0 002 2h12a2 2 0 002-2V5a2 2 0 00-2-2H4zm12 12H4l4-8 3 6 2-4 3 6z"
														clip-rule="evenodd"></path>
												</svg>
												<span class="sr-only">Upload image</span>
											</button>
										</div> -->
									</div>
								</div>
							</form>
						</div>
					</div>

					<Error>
						<p slot="header">Invalid Input</p>
						<p slot="body">The string you have input is not valid Json.</p>
					</Error>

					<div
						class="p-4 w-full mb-4 border border-gray-200 rounded-lg bg-gray-50 dark:bg-gray-700 dark:border-gray-600"
					>
						<div id="result" class="w-full text-left"></div>
					</div>
				</div>
			</div>
		</div>
	</div>
</section>
